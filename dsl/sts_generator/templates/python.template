# Autogenerated Lambda test
# Template: {{type}}

{%- macro json_spaces(depth) %}
{% for i in range(depth) %}    {% endfor %}
{% endmacro %}


import os
import pytest

from unittest import mock
from {{function.name}} import handler


{% if function.env %}
@pytest.fixture(autouse=True)
def mock_env_vars():
  {% if function.env.type == "json" %}
    with mock.patch.dict(os.environ, {
    {% for env_var in function.env.value.members %}
        "{{env_var.key}}": "{{env_var.value}}"{{ "," if not loop.last else "" }}
    {% endfor %}
    }):
        yield
  {% elif function.env.type == "string" %}
    with mock.patch(os.environ, "{{function.env.value}}"):
        yield
  {% elif function.env.type == "int" or function.env.type == "bool" or function.env.type == "null" %}
    with mock.patch(os.environ, {{function.env.value}}):
        yield
  {% endif %}


{% endif %}
{% for case in function.cases %}
{% if case.env %}
@pytest.fixture()
def mock_env_vars_{{case.name}}():
  {% if case.env.type == "json" %}
    with mock.patch.dict(os.environ, {
    {% for env_var in case.env.value.members %}
        "{{env_var.key}}": "{{env_var.value}}"{{ "," if not loop.last else "" }}
    {% endfor %}
    }):
        yield
  {% elif case.env.type == "string" %}
    with mock.patch(os.environ, "{{case.env.value}}"):
        yield
  {% elif case.env.type == "null" %}
    with mock.patch(os.environ, None):
        yield
  {% elif case.env.type == "int" or case.env.type == "bool" %}
    with mock.patch(os.environ, {{case.env.value}}):
        yield
  {% endif %}


{% endif %}
def test_{{case.name}}({%- if case.env %}mock_env_vars_{{case.name}}{% endif -%}):
  {% if case.input %}
    {% if case.input.type == "json" %}
    event = {
          {% for member in case.input.value.members recursive %}
{% if "JSONObject" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": {
{{ loop(member.value.members) }}
{{ json_spaces(loop.depth + 1) }}}{% if not loop.last %},
{% endif %}
{% elif "JSONArray" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": [
{% for value in member.value.values %}
{% if "JSONObject" in value.__class__.__name__ %}
{ {{ loop(value.members) }}
{{ json_spaces(loop.depth + 1) }}}{% if not loop.last %},
{% endif %}
{% elif "JSONArray" in value.__class__.__name__ %}
[{{ loop(value.values) }}
{{ json_spaces(loop.depth + 1) }}]{% if not loop.last %},
{% endif %}
{% elif value == "null" %}
{{ json_spaces(loop.depth + 1) }}None{% if not loop.last %},
{% endif %}
{% elif "str" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ value }}"{% if not loop.last %},
{% endif %}
{% elif "bool" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}{{ value }}{% if not loop.last %},
{% endif %}
{% elif "int" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}{{ value }}{% if not loop.last %},
{% endif %}
{{ json_spaces(loop.depth + 1) }}]{% if not loop.last %},{% endif %}
{% endif %}
{% endfor %}
{% elif member.value == "null" %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": None{% if not loop.last %},
{% endif %}
{% elif "str" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": "{{ member.value }}"{% if not loop.last %},
{% endif %}
{% elif "bool" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": {{ member.value }}{% if not loop.last %},
{% endif %}
{% elif "int" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": {{ member.value }}{% if not loop.last %},
{% endif %}
{% endif %}
{% endfor %}

    }
    {% elif case.input.type == "string" %}
    event = "{{ case.input.value }}"
    {% else %}
    event = {{ "None" if case.input.value == "null" else case.input.value }}
    {% endif %}

    result = handler(event, [])
  {% else %}
    result = handler({}, [])
  {% endif %}

  {% if case.output %}
    {% if case.output.type == "json" %}
    assert result == {
        {% for member in case.output.value.members recursive %}
{% if "JSONObject" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": {
{{ loop(member.value.members) }}
{{ json_spaces(loop.depth + 1) }}}{% if not loop.last %},
{% endif %}
{% elif "JSONArray" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": [
{% for value in member.value.values %}
{% if "JSONObject" in value.__class__.__name__ %}
{ {{ loop(value.members) }}
{{ json_spaces(loop.depth + 1) }}}{% if not loop.last %},
{% endif %}
{% elif "JSONArray" in value.__class__.__name__ %}
[{{ loop(value.values) }}
{{ json_spaces(loop.depth + 1) }}]{% if not loop.last %},
{% endif %}
{% elif value == "null" %}
{{ json_spaces(loop.depth + 1) }}None{% if not loop.last %},
{% endif %}
{% elif "str" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ value }}"{% if not loop.last %},
{% endif %}
{% elif "bool" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}{{ value }}{% if not loop.last %},
{% endif %}
{% elif "int" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}{{ value }}{% if not loop.last %},
{% endif %}
{{ json_spaces(loop.depth + 1) }}]{% if not loop.last %},{% endif %}
{% endif %}
{% endfor %}
{% elif member.value == "null" %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": None{% if not loop.last %},
{% endif %}
{% elif "str" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": "{{ member.value }}"{% if not loop.last %},
{% endif %}
{% elif "bool" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": {{ member.value }}{% if not loop.last %},
{% endif %}
{% elif "int" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 1) }}"{{ member.key }}": {{ member.value }}{% if not loop.last %},
{% endif %}
{% endif %}
{% endfor %}

    }
    {% elif case.output.type == "string" %}
    assert result == "{{ case.output.value }}"
    {% else %}
    assert result == {{ "None" if case.output.type == "null" else case.output.value }}
    {% endif %}
  {% endif %}
{% if not loop.last %}


{% endif %}
{% endfor %}
