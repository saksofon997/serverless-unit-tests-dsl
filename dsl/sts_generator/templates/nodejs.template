// Autogenerated Lambda test
// Template: {{type}}

{%- macro json_spaces(depth) %}
{% for i in range(depth) %}  {% endfor %}
{% endmacro %}


import * as {{function.name}} from "../{{function.name}}";

describe("{{function.name}}", () => {
{% if function.env %}
  beforeAll(() => {
  {% if function.env.type == "json" %}
    {% for env_var in function.env.value.members %}
    process.env.{{env_var.key}} = "{{env_var.value}}";
    {% endfor %}
  {% elif function.env.type == "string" %}
    process.env = "{{function.env.value}}";
  {% elif function.env.type == "int" or function.env.type == "null" %}
    process.env = {{function.env.value}};
  {% elif function.env.type == "bool" %}
    process.env = {{function.env.value|string|lower}};
  {% endif %}
  });

{% endif %}
  {% for case in function.cases %}
  test("{{case.name}}", async () => {
    {% if case.env %}
      {% if case.env.type == "json" %}
        {% for env_var in case.env.value.members %}
    process.env.{{env_var.key}} = "{{env_var.value}}";
        {% endfor %}
      {% elif case.env.type == "string" %}
    process.env = "{{case.env.value}}";
      {% elif case.env.type == "int" or case.env.type == "null" %}
    process.env = {{case.env.value}};
      {% elif case.env.type == "bool" %}
    process.env = {{case.env.value|string|lower}};
      {% endif %}

    {% endif %}
    {% if case.input %}
      {% if case.input.type == "json" %}
    const event = {
{% for member in case.input.value.members recursive %}
{% if "JSONObject" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: {
{{ loop(member.value.members) }}
{{ json_spaces(loop.depth + 2) }}}{% if not loop.last %},
{% endif %}
{% elif "JSONArray" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: [
{% for value in member.value.values %}
{% if "JSONObject" in value.__class__.__name__ %}
{ {{ loop(value.members) }}
{{ json_spaces(loop.depth + 2) }}}{% if not loop.last %},
{% endif %}
{% elif "JSONArray" in value.__class__.__name__ %}
[{{ loop(value.values) }}
{{ json_spaces(loop.depth + 2) }}]{% if not loop.last %},
{% endif %}
{% elif value == "null" %}
{{ json_spaces(loop.depth + 2) }}null{% if not loop.last %},
{% endif %}
{% elif "str" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}"{{ value }}"{% if not loop.last %},
{% endif %}
{% elif "bool" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ value|string|lower }}{% if not loop.last %},
{% endif %}
{% elif "int" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ value }}{% if not loop.last %},
{% endif %}
{{ json_spaces(loop.depth + 2) }}]{% if not loop.last %},{% endif %}
{% endif %}
{% endfor %}
{% elif member.value == "null" %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: null{% if not loop.last %},
{% endif %}
{% elif "str" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: "{{ member.value }}"{% if not loop.last %},
{% endif %}
{% elif "bool" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: {{ member.value|string|lower }}{% if not loop.last %},
{% endif %}
{% elif "int" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: {{ member.value }}{% if not loop.last %},
{% endif %}
{% endif %}
{% endfor %}
    
    };

      {% elif case.input.type == "string" %}
    const event = "{{case.input.value}}";
      {% elif case.input.type == "int" or case.input.type == "null" %}
    const event = {{case.input.value}};
      {% elif case.input.type == "bool" %}
    const event = {{case.input.value|string|lower}};
      {% endif %}
    const result = await {{function.name}}.handler(event);
    {% else %}
    const result = await {{function.name}}.handler();
    {% endif %}

    {% if case.output %}
      {% if case.output.type == "json" %}
    expect(result).toEqual({
{% for member in case.output.value.members recursive %}
{% if "JSONObject" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: {
{{ loop(member.value.members) }}
{{ json_spaces(loop.depth + 2) }}}{% if not loop.last %},
{% endif %}
{% elif "JSONArray" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: [
{% for value in member.value.values %}
{% if "JSONObject" in value.__class__.__name__ %}
{ {{ loop(value.members) }}
{{ json_spaces(loop.depth + 2) }}}{% if not loop.last %},
{% endif %}
{% elif "JSONArray" in value.__class__.__name__ %}
[{{ loop(value.values) }}
{{ json_spaces(loop.depth + 2) }}]{% if not loop.last %},
{% endif %}
{% elif value == "null" %}
{{ json_spaces(loop.depth + 2) }}null{% if not loop.last %},
{% endif %}
{% elif "str" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}"{{ value }}"{% if not loop.last %},
{% endif %}
{% elif "bool" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ value|string|lower }}{% if not loop.last %},
{% endif %}
{% elif "int" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ value }}{% if not loop.last %},
{% endif %}
{{ json_spaces(loop.depth + 2) }}]{% if not loop.last %},{% endif %}
{% endif %}
{% endfor %}
{% elif member.value == null %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: null{% if not loop.last %},
{% endif %}
{% elif "str" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: "{{ member.value }}"{% if not loop.last %},
{% endif %}
{% elif "bool" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: {{ member.value|string|lower }}{% if not loop.last %},
{% endif %}
{% elif "int" in member.value.__class__.__name__ %}
{{ json_spaces(loop.depth + 2) }}{{ member.key }}: {{ member.value }}{% if not loop.last %},
{% endif %}
{% endif %}
{% endfor %}
    
    });
      {% elif case.output.type == "string" %}
    expect(result).toEqual("{{case.output.value}}");
      {% elif case.output.type == "int" or case.output.type == "null" %}
    expect(result).toEqual({{case.output.value}});
      {% elif case.output.type == "bool" %}
    expect(result).toEqual({{case.output.value|string|lower}});
      {% endif %}
    {% endif %}
  });
{% if not loop.last %}

{% endif %}
  {% endfor %}
});
